const n=JSON.parse(`{"key":"v-3e1a8bf8","path":"/posts/Algorithm/Shortest_path_algorithm.html","title":"最短路算法","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-03-19T00:00:00.000Z","category":["算法"],"tag":["最短路"],"description":"最短路算法 Floyd-Warshall Floyd-Warshall，一般称Floyd(弗洛伊德)最短路算法，是解决图论最短路问题中使用最多的多源最短路算法,其核心在于将图中的每一个点作为起点、中转点和终点，尝试是否能更新出更短的道路，因此，Floyd算法的时间复杂度为n^3 下面是用C++实现的部分模板代码 int main(){ for(int k=1;k&lt;=n;k++){ for(int i=1;i&lt;=n;i++){ for(int j=1;j&lt;=n;j++){ d[i][j]=min(d[i][j],d[i][k]+d[k][j]); } } } }","head":[["meta",{"property":"og:url","content":"https://blog.sciencekill.top/posts/Algorithm/Shortest_path_algorithm.html"}],["meta",{"property":"og:site_name","content":"Sciencekill's Blog"}],["meta",{"property":"og:title","content":"最短路算法"}],["meta",{"property":"og:description","content":"最短路算法 Floyd-Warshall Floyd-Warshall，一般称Floyd(弗洛伊德)最短路算法，是解决图论最短路问题中使用最多的多源最短路算法,其核心在于将图中的每一个点作为起点、中转点和终点，尝试是否能更新出更短的道路，因此，Floyd算法的时间复杂度为n^3 下面是用C++实现的部分模板代码 int main(){ for(int k=1;k&lt;=n;k++){ for(int i=1;i&lt;=n;i++){ for(int j=1;j&lt;=n;j++){ d[i][j]=min(d[i][j],d[i][k]+d[k][j]); } } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-29T11:22:46.000Z"}],["meta",{"property":"article:author","content":"Sciencekill"}],["meta",{"property":"article:tag","content":"最短路"}],["meta",{"property":"article:published_time","content":"2023-03-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-29T11:22:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最短路算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-29T11:22:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sciencekill\\",\\"url\\":\\"https://sciencekill.top\\"}]}"]]},"headers":[{"level":2,"title":"Floyd-Warshall","slug":"floyd-warshall","link":"#floyd-warshall","children":[]},{"level":2,"title":"Bellman-Ford","slug":"bellman-ford","link":"#bellman-ford","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1682839423000,"updatedTime":1688037766000,"contributors":[{"name":"Sciencekill","email":"sciencekill@outlook.com","commits":5}]},"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"posts/Algorithm/Shortest_path_algorithm.md","localizedDate":"2023年3月19日","excerpt":"<h1> 最短路算法</h1>\\n<h2> Floyd-Warshall</h2>\\n<p>Floyd-Warshall，一般称Floyd(弗洛伊德)最短路算法，是解决图论最短路问题中使用最多的<strong>多源最短路算法</strong>,其核心在于将图中的每一个点作为起点、中转点和终点，尝试是否能更新出更短的道路，因此，Floyd算法的时间复杂度为n^3</p>\\n<p>下面是用C++实现的部分模板代码</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> k<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>k<span class=\\"token operator\\">&lt;=</span>n<span class=\\"token punctuation\\">;</span>k<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;=</span>n<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>j<span class=\\"token operator\\">&lt;=</span>n<span class=\\"token punctuation\\">;</span>j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                d<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>d<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>d<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>k<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">+</span>d<span class=\\"token punctuation\\">[</span>k<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
