const n=JSON.parse(`{"key":"v-1dc166ab","path":"/posts/Algorithm/Union_Find_Algorithm.html","title":"并查集算法","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-07-03T00:00:00.000Z","category":"算法","tag":["并查集"],"description":"并查集算法 并查集(Union-find algorithm),是用于判断树型结构中的两个点是否相通 并查集分为并和查两部分，首先，需要一个数组，并把元素初始化为下标，即初始时所有元素的根是自己，假设这个数组为rt 下面是递归写法的查找代码 int find(int x){ if(rt[x]==x)return x; return rt[x]=find(rt[x]); }","head":[["meta",{"property":"og:url","content":"https://blog.sciencekill.top/posts/Algorithm/Union_Find_Algorithm.html"}],["meta",{"property":"og:site_name","content":"Sciencekill's Blog"}],["meta",{"property":"og:title","content":"并查集算法"}],["meta",{"property":"og:description","content":"并查集算法 并查集(Union-find algorithm),是用于判断树型结构中的两个点是否相通 并查集分为并和查两部分，首先，需要一个数组，并把元素初始化为下标，即初始时所有元素的根是自己，假设这个数组为rt 下面是递归写法的查找代码 int find(int x){ if(rt[x]==x)return x; return rt[x]=find(rt[x]); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-30T08:21:39.000Z"}],["meta",{"property":"article:author","content":"Sciencekill"}],["meta",{"property":"article:tag","content":"并查集"}],["meta",{"property":"article:published_time","content":"2023-07-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-30T08:21:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并查集算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-30T08:21:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sciencekill\\",\\"url\\":\\"https://sciencekill.top\\"}]}"]]},"headers":[],"git":{"createdTime":1688372338000,"updatedTime":1693383699000,"contributors":[{"name":"Sciencekill","email":"sciencekill@outlook.com","commits":4},{"name":"sciencekiller","email":"sciencekill@outlook.com","commits":1}]},"readingTime":{"minutes":0.81,"words":244},"filePathRelative":"posts/Algorithm/Union_Find_Algorithm.md","localizedDate":"2023年7月3日","excerpt":"<h1> 并查集算法</h1>\\n<p>并查集(Union-find algorithm),是用于判断树型结构中的两个点是否相通<br>\\n并查集分为并和查两部分，首先，需要一个数组，并把元素初始化为下标，即初始时所有元素的根是自己，假设这个数组为rt</p>\\n<p>下面是递归写法的查找代码</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>rt<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">==</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> rt<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span>rt<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
