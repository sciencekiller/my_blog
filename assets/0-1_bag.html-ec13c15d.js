const e=JSON.parse(`{"key":"v-d55a0832","path":"/posts/Algorithm/Dynamic_programming/0-1_bag.html","title":"0-1 背包","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-07-07T00:00:00.000Z","category":["算法"],"tag":["动态规划","背包问题"],"description":"0-1 背包 背景 0-1 背包指在总金额N的范围中,放入指定物体(每样只有一个,可以不放),求最大总价值的问题 思路 选择使用动态规划。定义一个二维dp[i][j],其中,i表示在序号小于i的物品中任意选择,j表示背包大小,即dp[i][j]表示在前i个物品中选择重量不大于j的物品的最大价值。每一次更新时如果能装下,有2个选择(拿——dp[i-1][j-w[i]]+v[i],不拿——dp[i-1][j]),装不下就保留没有包括此物品物品的状态dp[i-1][j]。 状态转移方程中的dp[i][j]=dp[i-1][j-w[i]]+v[i]表示要拿这个物品,就用没有包括此物品时的最大值(这里的j-w[i]是为第i个物品预留位置)加上第i个物品的价值。如果不拿,就保留i-1的状态。","head":[["meta",{"property":"og:url","content":"https://blog.sciencekill.top/posts/Algorithm/Dynamic_programming/0-1_bag.html"}],["meta",{"property":"og:site_name","content":"Sciencekill's Blog"}],["meta",{"property":"og:title","content":"0-1 背包"}],["meta",{"property":"og:description","content":"0-1 背包 背景 0-1 背包指在总金额N的范围中,放入指定物体(每样只有一个,可以不放),求最大总价值的问题 思路 选择使用动态规划。定义一个二维dp[i][j],其中,i表示在序号小于i的物品中任意选择,j表示背包大小,即dp[i][j]表示在前i个物品中选择重量不大于j的物品的最大价值。每一次更新时如果能装下,有2个选择(拿——dp[i-1][j-w[i]]+v[i],不拿——dp[i-1][j]),装不下就保留没有包括此物品物品的状态dp[i-1][j]。 状态转移方程中的dp[i][j]=dp[i-1][j-w[i]]+v[i]表示要拿这个物品,就用没有包括此物品时的最大值(这里的j-w[i]是为第i个物品预留位置)加上第i个物品的价值。如果不拿,就保留i-1的状态。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-07T08:06:37.000Z"}],["meta",{"property":"article:author","content":"Sciencekill"}],["meta",{"property":"article:tag","content":"动态规划"}],["meta",{"property":"article:tag","content":"背包问题"}],["meta",{"property":"article:published_time","content":"2023-07-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-07T08:06:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0-1 背包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-07T08:06:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sciencekill\\",\\"url\\":\\"https://sciencekill.top\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"模板代码","slug":"模板代码","link":"#模板代码","children":[]},{"level":2,"title":"dp空间优化","slug":"dp空间优化","link":"#dp空间优化","children":[{"level":3,"title":"模板代码","slug":"模板代码-1","link":"#模板代码-1","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]}],"git":{"createdTime":1688717197000,"updatedTime":1688717197000,"contributors":[{"name":"Sciencekill","email":"sciencekill@outlook.com","commits":1}]},"readingTime":{"minutes":1.78,"words":535},"filePathRelative":"posts/Algorithm/Dynamic_programming/0-1_bag.md","localizedDate":"2023年7月7日","excerpt":"<h1> 0-1 背包</h1>\\n<h2> 背景</h2>\\n<p>0-1 背包指在总金额N的范围中,放入指定物体(每样只有一个,可以不放),求最大总价值的问题</p>\\n<h2> 思路</h2>\\n<p>选择使用动态规划。定义一个二维dp[i][j],其中,i表示在序号小于i的物品中任意选择,j表示背包大小,即dp[i][j]表示在前i个物品中选择重量不大于j的物品的最大价值。每一次更新时如果能装下,有2个选择(拿——dp[i-1][j-w[i]]+v[i],不拿——dp[i-1][j]),装不下就保留没有包括此物品物品的状态dp[i-1][j]。<br>\\n状态转移方程中的dp[i][j]=dp[i-1][j-w[i]]+v[i]表示要拿这个物品,就用没有包括此物品时的最大值(这里的j-w[i]是为第i个物品预留位置)加上第i个物品的价值。如果不拿,就保留i-1的状态。</p>","autoDesc":true}`);export{e as data};
